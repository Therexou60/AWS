# üöÄ Challenge "Missing Front-End" : R√©solution et Configuration AWS

## üìå Contexte
Vous √™tes responsable d'une application web o√π l'√©quipe front-end signale que les fichiers statiques (HTML, CSS, JS) ne s'affichent plus correctement. Vous devez diagnostiquer et r√©soudre ce probl√®me en utilisant les services AWS pour h√©berger et distribuer correctement ces fichiers.

### üîß Services AWS potentiellement utilis√©s
- **Amazon S3**
- **Amazon CloudFront**
- **AWS Route 53**
- **AWS Certificate Manager (ACM)**
- **AWS CloudWatch**

---

## ‚úÖ Solution 1 : H√©bergement des fichiers statiques avec Amazon S3 et CloudFront

### üèóÔ∏è √âtapes d√©taill√©es

1. **Cr√©er un bucket S3 pour h√©berger les fichiers statiques**
   - Acc√©dez √† la console Amazon S3 et cr√©ez un nouveau bucket.
     - Donnez-lui un nom unique (ex. `frontend-static-files`).
     - Choisissez la r√©gion o√π vous souhaitez h√©berger.
   - T√©l√©versez les fichiers statiques (HTML, CSS, JS) dans le bucket.
   - Configurez les autorisations :
     - Activez "Bloquer tout acc√®s public" pour s√©curiser votre bucket.
     - Configurez une politique de bucket pour permettre l'acc√®s CloudFront :

       ```json
       {
         "Version": "2012-10-17",
         "Statement": [
           {
             "Effect": "Allow",
             "Principal": {
               "Service": "cloudfront.amazonaws.com"
             },
             "Action": "s3:GetObject",
             "Resource": "arn:aws:s3:::frontend-static-files/*"
           }
         ]
       }
       ```

2. **Configurer Amazon CloudFront pour acc√©l√©rer la distribution**
   - Cr√©ez une distribution CloudFront dans la console AWS.
   - Configurez :
     - Origine : le bucket S3 cr√©√© pr√©c√©demment.
     - Param√®tres de cache :
       - Activer le cache des fichiers statiques pour am√©liorer les performances.
       - Configurez des TTL adapt√©s (ex. 1 jour).
     - Ajouter une politique de s√©curit√© HTTP (forcer HTTPS).
   - Enregistrez la distribution et attendez son d√©ploiement.

3. **Configurer AWS Certificate Manager (ACM) pour HTTPS**
   - Acc√©dez √† la console ACM et demandez un certificat SSL.
     - Choisissez "Validation DNS" pour lier un domaine √† votre distribution CloudFront.
   - Une fois valid√©, associez le certificat √† votre distribution CloudFront.

4. **Relier un domaine avec AWS Route 53**
   - Acc√©dez √† la console Route 53 et cr√©ez un enregistrement DNS (CNAME ou Alias).
     - Pointez vers l'URL CloudFront fournie.
   - V√©rifiez que le domaine est correctement configur√© et que votre front-end est accessible.

5. **Activer les logs et la surveillance**
   - Configurez les logs CloudFront et S3 pour surveiller l'acc√®s aux fichiers.
   - Utilisez AWS CloudWatch pour cr√©er des alarmes en cas d'erreurs HTTP 4XX/5XX.

---

## ‚úÖ Solution 2 : Diagnostiquer et corriger les erreurs front-end existantes

### üèóÔ∏è √âtapes d√©taill√©es

1. **V√©rifier les permissions du bucket S3**
   - Assurez-vous que les fichiers sont accessibles et qu'ils ne renvoient pas d'erreur 403 (Forbidden).
   - Testez les URL directes des fichiers dans le navigateur.

2. **Diagnostiquer les erreurs avec CloudFront**
   - V√©rifiez les param√®tres de l'origine CloudFront :
     - Assurez-vous que l'URL du bucket S3 est correcte.
     - V√©rifiez que les permissions "s3:GetObject" sont configur√©es pour CloudFront.
   - Activez les logs de CloudFront pour identifier les erreurs.

3. **Corriger les erreurs de chemin ou d'index**
   - Configurez un document d'index et un document d'erreur pour CloudFront :
     - Exemple : `index.html` pour les requ√™tes sans chemin sp√©cifique.
   - Assurez-vous que les chemins des fichiers r√©f√©renc√©s dans `index.html` sont corrects.

4. **Configurer les headers HTTP pour √©viter les erreurs CORS**
   - Ajoutez des headers CORS dans le bucket S3 :

     ```xml
     <CORSConfiguration>
       <CORSRule>
         <AllowedOrigin>*</AllowedOrigin>
         <AllowedMethod>GET</AllowedMethod>
         <MaxAgeSeconds>3000</MaxAgeSeconds>
         <AllowedHeader>*</AllowedHeader>
       </CORSRule>
     </CORSConfiguration>
     ```

5. **Tester les performances et le bon fonctionnement**
   - Utilisez des outils comme `curl` ou des navigateurs pour tester les r√©ponses HTTP.
   - V√©rifiez que les fichiers statiques sont correctement servis avec HTTPS.

---

## üîÑ Alternatives et solutions suppl√©mentaires

1. **Utiliser un autre CDN**
   - Si CloudFront ne r√©pond pas √† vos besoins, envisagez un autre CDN comme Akamai ou Cloudflare.

2. **Activer la compression des fichiers statiques**
   - Configurez CloudFront pour servir les fichiers compress√©s (Gzip ou Brotli).

3. **H√©berger avec AWS Amplify si l'application est plus complexe**
   - Pour une application front-end utilisant des frameworks comme React ou Angular, utilisez AWS Amplify pour simplifier le d√©ploiement.

4. **Mettre en place une strat√©gie de s√©curit√© avanc√©e**
   - Ajouter AWS WAF √† votre distribution CloudFront pour prot√©ger l'application contre les attaques web.

## üöÄ Solution 1 : Utilisation de AWS Lambda et CloudFront

### üèóÔ∏è √âtapes √† suivre

1. **V√©rifier l'existence de la fonction Lambda**
   - Aller dans la console AWS ‚Üí AWS Lambda
   - Rechercher la fonction associ√©e au front-end
   - V√©rifier si elle existe encore et fonctionne correctement
   - Tester la fonction avec un payload adapt√©

2. **Restaurer la fonction Lambda si n√©cessaire**
   - Si la fonction est supprim√©e ou corrompue, la recr√©er
   - D√©ployer une nouvelle fonction Lambda en Node.js/Python qui sert le front-end
   - S'assurer que la fonction a les bonnes permissions et qu'elle retourne bien les donn√©es attendues

3. **Cr√©er un CloudFront Distribution pour exposer le front-end**
   - Aller dans la console AWS ‚Üí CloudFront
   - Cr√©er une nouvelle distribution
   - D√©finir la fonction Lambda comme origine
   - Configurer les param√®tres de cache et les headers de s√©curit√©

4. **Tester l‚Äôacc√®s au front-end**
   - Ouvrir l‚ÄôURL CloudFront et voir si les donn√©es sont accessibles
   - V√©rifier les logs CloudWatch en cas d'erreur

---

## üõ†Ô∏è Solution 2 : H√©bergement du Front-End sur S3 avec CloudFront

### üèóÔ∏è √âtapes √† suivre

1. **Cr√©er un bucket S3 pour h√©berger le front-end**
   - Aller dans la console AWS ‚Üí S3
   - Cr√©er un bucket (ex: `gdi-frontend`)
   - Activer l‚Äôoption "Static Website Hosting"
   - T√©l√©charger les fichiers HTML/CSS/JS

2. **Configurer les permissions du bucket**
   - Rendre les fichiers publics si n√©cessaire
   - Ajouter une policy S3 pour permettre la lecture des fichiers

3. **Cr√©er une distribution CloudFront pointant vers S3**
   - Aller dans CloudFront
   - Cr√©er une nouvelle distribution avec l‚Äôorigine = S3
   - Activer le cache pour de meilleures performances

4. **Tester l‚Äôacc√®s au front-end**
   - Ouvrir l‚ÄôURL CloudFront
   - V√©rifier les logs CloudWatch en cas de probl√®me

---

## üèóÔ∏è Solutions Alternatives si les approches ci-dessus ne fonctionnent pas

1. **API Gateway + Lambda**
   - Si CloudFront ne fonctionne pas, utiliser **API Gateway** pour exposer la fonction Lambda en HTTP
   - Tester avec Postman pour v√©rifier la bonne r√©ponse de l‚ÄôAPI

2. **Elastic Beanstalk pour un d√©ploiement plus robuste**
   - Si le front-end est plus complexe, utiliser **Elastic Beanstalk** avec un serveur Node.js

3. **CloudFormation pour automatiser le d√©ploiement**
   - Si le challenge impose une automatisation, utiliser **CloudFormation** pour d√©ployer Lambda, CloudFront et S3 en une seule commande

4. **AWS Amplify pour un h√©bergement rapide**
   - AWS Amplify peut √™tre utilis√© pour h√©berger et g√©rer le front-end avec un pipeline CI/CD int√©gr√©
   - Permet un d√©ploiement rapide avec int√©gration √† GitHub/GitLab

5. **Amazon Lightsail pour une alternative plus simple**
   - Si une instance l√©g√®re est suffisante, Lightsail peut h√©berger un serveur web √† faible co√ªt
   - Configurable avec un CDN int√©gr√© pour de meilleures performances

6. **Utilisation de EC2 + ALB**
   - D√©ployer le front-end sur une instance EC2 derri√®re un Application Load Balancer (ALB)
   - Permet un contr√¥le total sur l‚Äôenvironnement

7. **Utilisation de Step Functions pour orchestrer la restauration**
   - AWS Step Functions peut √™tre utilis√© pour ex√©cuter une s√©quence d‚Äôactions automatis√©es en cas de panne
   - Ex : V√©rifier la pr√©sence de Lambda ‚Üí Recr√©er si n√©cessaire ‚Üí Configurer CloudFront ‚Üí V√©rifier l‚Äôacc√®s

---

